/**
 * SASS File:     blueplate.sass
 * Author:        Chris Humboldt
 * Link:          http://getwebplate.com/plugins/blueplate
 * Last Edited:   18 February 2014
 * Edited By:     Chris Humboldt
 *
 * NOTE:          The layout em's are based on a base font size of 16px.
 */

// Table of Contents:
// ---------------------------------------------------------------------------------------

// Variables
// Mixins
// CSS call


// Variables
// ---------------------------------------------------------------------------------------
$column-limit           : 12;
$spacing-limit          : 10;
$limit-width            : 68.750em;


// Mixins
// ---------------------------------------------------------------------------------------
@mixin row() {
  width: 100%;
  
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}
@mixin make-span($span: $column-limit, $span-column-limit: $column-limit) {
  width: percentage($span / $column-limit);
}
@mixin new-span($span: $column-limit, $span-column-limit: $column-limit) {
  width: percentage($span / $column-limit);
}
@mixin span($span: $column-limit, $span-column-limit: $column-limit) {
  float: left;
  position: relative;
  width: percentage($span / $column-limit);
}
@mixin offset($off-by, $span-column-limit: $column-limit) {
  margin-left: percentage($off-by / $column-limit);
}
@mixin offset-r($off-by, $span-column-limit: $column-limit) {
  margin-right: percentage($off-by / $column-limit);
}
@mixin reset-span() {
  @include span(12);
  @include offset(0);
  @include offset-r(0);
}
@mixin hide() {
  display: none;
}
@mixin show() {
  display: block;
}
@mixin limit() {
  width: $limit-width;
  margin: 0px auto;

  @media screen and (max-width: $limit-width) {
    width: 100%;
  }
}
@mixin respond-to($breakpoint, $breakpoint-type: min) {
  
  // Desktop
  @if $breakpoint == 'large' {
    
    @media screen and (min-width: 43.813em) { 
      @content; 
    }
  }
  @else if $breakpoint == 'fluid' {
    
    @media screen and (max-width: $limit-width) { 
      @content; 
    }
  }
  @else if $breakpoint == 'small' {
    
    @media screen and (max-width: 43.750em) { 
      @content; 
    }
  }
  @else {
    
    @if $breakpoint-type == 'max' {
      @media only screen and (max-width: $breakpoint) { 
        @content; 
      }
    }
    @else if $breakpoint-type == 'min' {
      @media only screen and (min-width: $breakpoint) { 
        @content; 
      } 
    }
  }
}
@mixin center() {
  margin: 0px auto;
}

// CSS
@mixin blueplate-display() {

  // Display classes
  .show {
    @include show();
  }
  .hide {
    @include hide();
  }
  .opacity-100 {
    opacity: 1;
  }
  .opacity-75 {
    opacity: 0.75;
  }
  .opacity-50 {
    opacity: 0.5;
  }
  .opacity-25 {
    opacity: 0.25;
  }
  .opacity-0 {
    opacity: 0;
  }

  // Respond
  @include respond-to(large) {

    .small-show {
      @include hide();
    }
    .large-show {
      @include show();
    }
    .large-hide {
      @include hide();
    }
  }
  @include respond-to(small) {

    .small-show {
      @include show();
    }
    .small-hide {
      @include hide();
    }
    .large-show {
      @include hide();
    }
  }
}
@mixin blueplate-position() {

  // Position classes
  .pos-absolute {
    position: absolute;
  }
  .pos-relative {
    position: relative;
  }
  .pos-static {
    position: static;
  }
  .pos-fixed {
    position: fixed;
  }
}
@mixin blueplate-alignment() {

  // Alignment classes
  .float-no {
    float: none;
  }
  .float-l {
    float: left;
  }
  .float-r {
    float: right;
  }
  .float-clear {
    clear: both;
  }
  .center {
    margin: 0px auto;
  }
  .valign-t {
    vertical-align: top;
  }
  .valign-m {
    vertical-align: middle;
  }
  .valign-b {
    vertical-align: bottom;
  }
}
@mixin blueplate-text() {

  // Text classes
  .hide-text {
    text-indent: -10000px;
    overflow: hidden;
  }
  .txt-l {
    text-align: left; 
  }
  .txt-c {
    text-align: center;
  }
  .txt-r {
    text-align: right;  
  }
  .txt-size-xxl {
    font-size: 1.5em;
  }
  .txt-size-xl {
    font-size: 1.250em;
  }
  .txt-size-l {
    font-size: 1.125em;
  }
  .txt-size-n {
    font-size: 1em;
  }
  .txt-size-m {
    font-size: 0.875em;
  }
  .txt-size-s {
    font-size: 0.750em;
  }
  .txt-size-xs {
    font-size: 0.625em;
  }
  .txt-weight-xb {
    font-weight: 900;
  }
  .txt-weight-b, .txt-bold {
    font-weight: 700;
  }
  .txt-weight-n {
    font-weight: 400;
  }
  .txt-weight-l, .txt-light {
    font-weight: 300;
  }
  .txt-weight-xl {
    font-weight: 100;
  }
  .txt-normal {
    font-weight: 400;
    font-style: normal;
  }
  .txt-italics {
    font-style: italic;
  }
  .txt-oblique {
    font-style: oblique;
  }
  .txt-white {
    color: #fff;
  }
  .txt-grey {
    color: fadeout(#000, 50%);
  }

  // Respond
  @include respond-to(large) {

    .large-txt-size-xxl {
      font-size: 1.444em;
    }
    .large-txt-size-xl {
      font-size: 1.222em;
    }
    .large-txt-size-l {
      font-size: 1.111em;
    }
    .large-txt-size-n {
      font-size: 1em;
    }
    .large-txt-size-m {
      font-size: 0.889em;
    }
    .large-txt-size-s {
      font-size: 0.778em;
    }
    .large-txt-size-xs {
      font-size: 0.667em;
    }
    .large-txt-weight-xb {
      font-weight: 900;
    }
    .large-txt-weight-b, .large-txt-bold {
      font-weight: 700;
    }
    .large-txt-weight-n {
      font-weight: 400;
    }
    .large-txt-weight-l, .large-txt-light {
      font-weight: 300;
    }
    .large-txt-weight-xl {
      font-weight: 100;
    }
    .large-txt-normal {
      font-weight: 400;
      font-style: normal;
    }
  }
}
@mixin blueplate-background() {

  // Background classes
  .back-pos-l {
    background-position: left;
  }
  .back-pos-r {
    background-position: right;
  }
  .back-pos-t {
    background-position: top;
  }
  .back-pos-b {
    background-position: bottom;
  }
  .back-pos-c {
    background-position: center;
  }
  .back-repeat-no {
    background-repeat: no-repeat;
  }
  .back-repeat-y {
    background-repeat: repeat-y;
  }
  .back-repeat-x {
    background-repeat: repeat-x;
  }
  .back-single {
    background-position: center;
    background-repeat: no-repeat;
  }
  .back-cover {
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
  }
  .back-black {
    background-color: #000;
  }
  .back-grey {
    background-color: lighten(#000, 50%);
  }
  .back-light-grey {
    background-color: lighten(#000, 90%);
  }
  .back-white {
    background-color: #fff;
  }
}
@mixin blueplate-sizing() {

  // Sizing
  .block-h-10 {
    height: 10px;
  }
  .block-h-20 {
    height: 20px;
  }
  .block-h-50 {
    height: 50px;
  }
  .block-h-100 {
    height: 100px;
  }
  .block-h-200 {
    height: 200px;
  }
  .block-h-500 {
    height: 500px;
  }
  .block-h-1000 {
    height: 1000px;
  }
  .block-w-10 {
    width: 10px;
  }
  .block-w-20 {
    width: 20px;
  }
  .block-w-50 {
    width: 50px;
  }
  .block-w-100 {
    width: 100px;
  }
  .block-w-200 {
    width: 200px;
  }
  .block-w-500 {
    width: 500px;
  }
  .block-w-1000 {
    width: 1000px;
  }
}
@mixin blueplate-layout() {

  // Responsive layout
  .row:before, .row:after {
    content: " ";
    display: table;
  }
  .row:after {
    clear: both;
  }
  .row {
    width: 100%;

    .row {
      width: auto;
    }
    [class *= "span-"] {
      float: left;
      position: relative;
    }
    
    // Span loop
    @for $index from 1 through $column-limit {
      
      .span-#{$index} {
        @include make-span($index);
      }
    }
    
    // Offset loop
    @for $index from 1 through ($column-limit - 1) {
      
      .offset-#{$index} {
        @include offset($index);
      }
      .offset-r-#{$index} {
        @include offset-r($index);
      }
    }
  }
  .limit {
    @include limit();
  }

  // Respond
  @include respond-to(large) {
    
    .row {
          
      // Large span loop
      @for $index from 1 through $column-limit {
      
        .large-span-#{$index} {
          @include make-span($index);
        }
      }
    
      // Offset loop
      @for $index from 1 through ($column-limit - 1) {
      
        .large-offset-#{$index} {
          @include offset($index);
        }
        .large-offset-r-#{$index} {
          @include offset-r($index);
        }
      }
    }
  }

  @include respond-to(small) {
    
    .row {
          
      // Small span loop
      @for $index from 1 through $column-limit {
      
        .small-span-#{$index} {
          @include make-span($index);
        }
      }
    
      // Offset loop
      @for $index from 1 through ($column-limit - 1) {
      
        .small-offset-#{$index} {
          @include offset($index);
        }
        .small-offset-r-#{$index} {
          @include offset-r($index);
        }
      }
    }
  }
}
@mixin blueplate-spacing() {

  // Spacing classes
  .spacing-no {
    padding: 0px;
    margin: 0px;
  }
  .pad-no {
    padding: 0px;
  }
  .mgn-no {
    margin: 0px;
  }
  @for $index from 1 through $spacing-limit {
    
    $multiplication   : 1px;
    $class-name     : ($index * 1);
    
    // Padding
    .pad-#{$class-name} {
      padding: ($multiplication * $index);
    }
    .pad-r-#{$class-name} {
      padding-right: ($multiplication * $index);
    }
    .pad-l-#{$class-name} {
      padding-left: ($multiplication * $index);
    }
    .pad-t-#{$class-name} {
      padding-top: ($multiplication * $index);
    }
    .pad-b-#{$class-name} {
      padding-bottom: ($multiplication * $index);
    }
    
    // Margin
    .mgn-#{$class-name} {
      margin: ($multiplication * $index);
    }
    .mgn-r-#{$class-name} {
      margin-right: ($multiplication * $index);
    }
    .mgn-l-#{$class-name} {
      margin-left: ($multiplication * $index);
    }
    .mgn-t-#{$class-name} {
      margin-top: ($multiplication * $index);
    }
    .mgn-b-#{$class-name} {
      margin-bottom: ($multiplication * $index);
    }
  }
}

// Create all CSS
@mixin blueplate-css() {

  @include blueplate-display();
  @include blueplate-position();
  @include blueplate-alignment();
  @include blueplate-text();
  @include blueplate-background();
  @include blueplate-sizing();
  @include blueplate-layout();
  @include blueplate-spacing();
}